Object.defineProperty(exports,"__esModule",{value:!0});exports.MobileSocketClient=void 0;const net_1=require("net"),abstract_socket_client_1=require("./abstract-socket-client");
class MobileSocketClient extends abstract_socket_client_1.AbstractSocketClient{constructor(){super(...arguments);this.socket=null}get isOpen(){var a;return"open"===(null===(a=this.socket)||void 0===a?void 0:a.readyState)}get isClosed(){var a;return null===this.socket||"closed"===(null===(a=this.socket)||void 0===a?void 0:a.readyState)}get isClosing(){var a;return null===this.socket||"closed"===(null===(a=this.socket)||void 0===a?void 0:a.readyState)}get isConnecting(){var a;return"opening"===(null===
(a=this.socket)||void 0===a?void 0:a.readyState)}async connect(){var a;if(!this.socket){if(this.config.agent)throw Error("There are not support for proxy agent for mobile connection");this.socket=(0,net_1.connect)({host:this.url.hostname,port:Number(this.url.port)||443});this.socket.setMaxListeners(0);var c="close connect data drain end error lookup ready timeout".split(" ");for(const b of c)null===(a=this.socket)||void 0===a||a.on(b,(...d)=>this.emit(b,...d));this.socket.on("data",(...b)=>this.emit("message",
...b));this.socket.on("ready",(...b)=>this.emit("open",...b))}}async close(){if(this.socket)return new Promise(a=>{this.socket.end(a);this.socket=null})}send(a,c){return null===this.socket?!1:this.socket.write(a,void 0,c)}}exports.MobileSocketClient=MobileSocketClient;
